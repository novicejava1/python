============================================================================================================
Easy steps to generate Self Signed certificate using OpenSSL|SSCG and enable TLSv1.3 in Apache HTTP Server
============================================================================================================


1. Key and Certificate Management

- Generate a strong private key
- Create a CSR and send it to CA
- Install the CA provided certificate to web server

2. Key generation requires the following to be considered

Key algorithm - RSA, DSA, ECDSA
Key size - 2048 bits for RSA and DSA, 256 bits for ECDSA

3. Generating RSA key without passphrase

$ openssl genrsa -out rsawithoutpass.key 2048

4. Extract RSA key details 

$ openssl rsa -text -in rsawithoutpass.key

5. Extract public part from RSA key

$ openssl rsa -in rsawithoutpass.key -pubout -out rsawithoutpasspublic.key

6. Generate CSR

$ openssl req -new -key rsawithoutpass.key -out rsawithoutpass.csr

7. Extract CSR details

$ openssl req -text -in rsawithoutpass.csr -noout

8. Generate a signed certificate

$ openssl x509 -req -days 365 -in rsawithoutpass.csr -signkey rsawithoutpass.key -out rsawithoutpasscert.crt

Using SSCG

1. Default SSCG Certificate generation

[admin@feddesk sscg]$ /usr/bin/sscg 
Wrote service certificate key to /home/admin/stack/certmanagement/sscg/service-key.pem
Wrote service certificate to /home/admin/stack/certmanagement/sscg/service.pem
Wrote CA certificate to /home/admin/stack/certmanagement/sscg/ca.crt

2. SSCG Certificate generation using parameters

[admin@feddesk sscg]$ /usr/bin/sscg --lifetime=365 --country=IN --state=Maharashtra --locality=Mumbai --organization="Stack Inc." --organizational-unit="Stack" --hostname="feddesk.stack.com" --subject-alt-name www.stack.com feddesk.stack.com --key-strength=2048 --hash-alg="sha256" --ca-file=singer.pem --cert-key-file=key.pem --cert-file=main.pem --cert-mode=0644 --cert-key-mode=0600
Wrote service certificate key to /home/admin/stack/certmanagement/sscg/key.pem
Wrote service certificate to /home/admin/stack/certmanagement/sscg/main.pem
Wrote CA certificate to /home/admin/stack/certmanagement/sscg/singer.pem

3. Update the ssl.conf file to accept only TLSv1.3 protocol

For, this i have my default httpd package installed and running, we need to edit the ssl.conf file as below to enable only TLSv1.3 protocol

[root@feddesk conf.d]# cat ssl.conf
Listen 443
<VirtualHost *:443>
    ServerName feddesk.stack.com
    SSLEngine on
#   SSLCertificateFile "/home/admin/stack/certmanagement/rsaKey_without_passphrase/rsawithoutpasscert.crt"
#   SSLCertificateKeyFile "/home/admin/stack/certmanagement/rsaKey_without_passphrase/rsawithoutpass.key"

#   Using SSCG SAN certificate and TLSv1.3 protocol
    SSLProtocol TLSv1.3
    SSLCertificateFile "/home/admin/stack/certmanagement/sscg/main.pem"
    SSLCertificateKeyFile "/home/admin/stack/certmanagement/sscg/key.pem"
</VirtualHost>

4. Update the custom log format to capture the SSL protocol and cipher used for communication

    #LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %{SSL_PROTOCOL}x %{SSL_CIPHER}x %b \"%{Referer}i\" \"%{User-Agent}i\"" combined

5. Validate the access log to check the SSL protocol and cipher being used

192.168.184.149 - - [01/Mar/2020:16:57:34 +0530] "GET / HTTP/1.1" 403 TLSv1.3 TLS_AES_128_GCM_SHA256 5564 "-" "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0"
192.168.184.149 - - [01/Mar/2020:17:00:34 +0530] "GET / HTTP/1.1" 403 TLSv1.3 TLS_AES_128_GCM_SHA256 5564 "-" "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0"

============================================================================================================
How to package key and certs into pkcs12 format
============================================================================================================

1. Package to p12 format

$ openssl pkcs12 -export -name "sscg_default" -out sscg_default.p12 -inkey service-key.pem -in service.pem -certfile ca.crt
export password - appc1234

2. List the p12 details

$ keytool -list -keystore sscg_default.p12 -storetype pkcs12
Enter keystore password:  
Keystore type: PKCS12
Keystore provider: SunJSSE

Your keystore contains 1 entry

sscg_default, Mar 7, 2020, PrivateKeyEntry, 
Certificate fingerprint (SHA1): EA:F6:1D:BE:35:9E:B5:4A:88:28:C4:D3:98:34:D8:7F:4D:69:A3:0D

3. Check key entry details

$ keytool -list -keystore sscg_default.p12 -storetype pkcs12 -alias sscg_default -v
Enter keystore password:  
Alias name: sscg_default
Creation date: Mar 7, 2020
Entry type: PrivateKeyEntry
Certificate chain length: 2
Certificate[1]:
Owner: CN=feddesk.stack.com, O=Unspecified, C=US
Issuer: CN=feddesk.stack.com, OU=ca-7760955977309563651, O=Unspecified, C=US
Serial number: 1c9ad2ac64f0bd6d
Valid from: Sun Mar 01 16:02:14 IST 2020 until: Fri Apr 19 08:42:14 IST 2030

============================================================================================================
Enabling Ciphers
============================================================================================================

1. Enable Honor Ciphers

SSLHonorCipherOrder On

Before
192.168.184.149 - - [01/Mar/2020:17:00:34 +0530] "GET /poweredby.png HTTP/1.1" 304 TLSv1.3 TLS_AES_128_GCM_SHA256 - "https://feddesk.stack.com/" "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0"

After
192.168.184.149 - - [07/Mar/2020:21:46:50 +0530] "GET / HTTP/1.1" 403 TLSv1.3 TLS_AES_256_GCM_SHA384 5564 "-" "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0"

============================================================================================================
Cipher selection
============================================================================================================

1. Select ciphers based on suites keyword group

$ openssl ciphers -v "HIGH"

2. List of default keyword grouops supported 

[root@feddesk ~]# openssl ciphers -v "DEFAULT" | wc -l 
61
[root@feddesk ~]# openssl ciphers -v "COMPLEMENTOFDEFAULT" | wc -l 
111
[root@feddesk ~]# openssl ciphers -v "ALL" | wc -l 
168
[root@feddesk ~]# openssl ciphers -v "COMPLEMENTOFALL" | wc -l 
22
[root@feddesk ~]# openssl ciphers -v "HIGH" | wc -l 
141
[root@feddesk ~]# openssl ciphers -v "MEDIUM" | wc -l 
31

3. Cipher suites based on Digest Algorithm

[root@feddesk ~]# openssl ciphers -v "SHA384" | wc -l
20
[root@feddesk ~]# openssl ciphers -v "SHA256" | wc -l
37
[root@feddesk ~]# openssl ciphers -v "SHA1" | wc -l
75

4. Cipher suites based on Authentication keywords

[root@feddesk ~]# openssl ciphers -v "aDSS" | wc -l
21
[root@feddesk ~]# openssl ciphers -v "aECDSA" | wc -l
22
[root@feddesk ~]# openssl ciphers -v "aRSA" | wc -l
79
[root@feddesk ~]# openssl ciphers -v "PSK" | wc -l
72
[root@feddesk ~]# openssl ciphers -v "SRP" | wc -l
13

5. Cipher suites based on key exchange alogrithm

Ephemeral suites tend to have an E at the end of the key exchange algorithm (e.g., ECDHE-RSA-RC4-SHA and DHE-RSA-AES256-SHA ), but in the keywords the E is at
the beginning (e.g., EECDH and EDH )

[root@feddesk ~]# openssl ciphers -v "DH" | wc -l
49
[root@feddesk ~]# openssl ciphers -v "ECDH" | wc -l
41
[root@feddesk ~]# openssl ciphers -v "EDH" | wc -l
37
[root@feddesk ~]# openssl ciphers -v "EECDH" | wc -l
36
[root@feddesk ~]# openssl ciphers -v "RSA" | wc -l
27


6. Cipher suites based on cipher

[root@feddesk ~]# openssl ciphers -v "3DES" | wc -l
18
[root@feddesk ~]# openssl ciphers -v "AES" | wc -l
90
[root@feddesk ~]# openssl ciphers -v "IDEA" | wc -l
5
[root@feddesk ~]# openssl ciphers -v "AESGCM" | wc -l
22
[root@feddesk ~]# openssl ciphers -v "SEED" | wc -l
8
[root@feddesk ~]# openssl ciphers -v "CAMELLIA" | wc -l
32

7. Select Cipher suites based on multiple keyword combination

$ openssl ciphers -v "AES+SHA256"

8. To show leaf and root certs with openssl client connection

$ echo | openssl s_client -connect feddesk.stack.com:443 -showcerts

9. Testing the cipher suite supported by Web server

$ echo | openssl s_client -connect feddesk.stack.com:443 -cipher AES+SHA256


10. Testing Session Resuse

[root@feddesk ~]# echo | openssl s_client -connect feddesk.stack.com:443 -reconnect | egrep 'New|Reused'
depth=0 C = IN, ST = Maharashtra, L = Mumbai, O = Stack Inc., OU = Stack, CN = feddesk.stack.com
verify error:num=20:unable to get local issuer certificate
verify return:1
depth=0 C = IN, ST = Maharashtra, L = Mumbai, O = Stack Inc., OU = Stack, CN = feddesk.stack.com
verify error:num=21:unable to verify the first certificate
verify return:1
New, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Reused, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Reused, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Reused, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Reused, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384
Reused, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384






