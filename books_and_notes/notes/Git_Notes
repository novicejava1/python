===============================================================================
Getting Started
===============================================================================

- Version control systems allows to record changes file or set of files using versioning
- VCS allows files or projects to be reverted to a particular state, compare changes, check last modified details
- Local VCS allows for versioning files in local system
- Centralized VCS allows for versioning files on a remote system. Allows for collaboration
- Distributed VCS which provide the snapshot feature. It fully mirrors the respository with history data locally when cloned
- Git allows for collaboration with several remote repositories. Allows to setup several types of workflows
- Git is fast, simple in design, supports non linear development (i.e branching), fully distributed, handle complex projects
- Git takes a snapshot of the complete project every time a commit is done. Its stores a reference to that snapshot
- Git thinks of its data like a stream of snapshots
- Git operations can be done offline mode also as the complete snapshot with history is cloned
- Everything in Git is checksummed before it is stored and is then referred by that checksum
- Git generally add data for any action taken. Ideally its possible to recover a complete repository
- Three main stages of Git are modified, staged, committed
- Git directory is where Git stores the metadata and object database for the project
- Install Git on your system with all required dependencies with "$ sudo dnf install git-all"
- git config allows to get and set configuration variables that control all aspects of how Git looks and operates
- Git configuraiton can be set at three levels - System level, User level, Repository level

===============================================================================
Git Basics
===============================================================================

- Git repository can be created locally by initializing or by cloning a remote repository (ie. git init or git clone)
- Git hooks are server side scripts that run automatically every time a particular event occurs in a Git repository
- Git has number of different transfer protocols to use for communication with repository
- git status will tell us at which branch our code is and whether it has diverged from the same branch on the server.
- git add is a multipurpose command, used to begin tracking new files, to stage files, marking merge conflicted files as resolved
- .gitignore file can be used to keep some files and folder structures from getting tracked under Git repository
- Github maintains a list of .gitignore files for a lot of projects and languages
- git diff can be used to check what has been changed but not staged and what has been staged and not yet committed (ie. git diff  and git diff --staged or git diff -- cached)
- git diff shows the extract lines added and removed
- git commit shows on which branch commit happended, how many files changes and how many lines added and removed as part of statistics
- Everytime we commit, we are recording a snapshot of the project that can we can revert to or compare to later
- git rm and git rm --cached allows to remove a file or getting a file from being tracked which was staged accidentally
- git log --patch helps in checking the difference introduced in each commit
- git log provides variety of fomrats and options to use to validate the commits
    $ git log --pretty=oneline
    $ git log --pretty=format:"%H %an %ar %s"
- git log allows for filtering commits based on author name, a particular string and also with limiting timestamp
- git reset HEAD <file> is used to unstage a file 
- git checkout -- <file> to discard any local modification to a file
- Everything that is commited in Git can be recovered, like deleted branches, overwritten commits
- Collaborating with other requires managing remote repositories and pushing and pulling data to and from these repositories
- Managing remote repositories include add remove repos, remove remotes that are no longer valid or required, manage remote branches and define them as being tracked or not
- There can be multiple remotes configured to collaborate with other projects
    git remote add origin <remote1>
    git remote add proj2 <remote2>
- git fetch can be used to get all the information from a specific remote repository
- git clone actually add the remote repository under the name origin
- git fetch origin pulls the latest updates from the repo. Its only downloads the data to local but does not merge with current work
- git pull command automatically fetch and then merge that remote branch to current branch (i.e fetch and merge)
- git push remote branch is used to push your work to remote repository branch
- git tagging helps to tag specific points in a repository history as being important like release commit
- There are two types of tags supported by Git (ie. ligthweight and annotated)
- lightweight tags are just pointers to a specific commit
- Annotated tags are stored as full objects in Git database. 
- Git tags can be pushed and pulled from remote repositories and can be deleted
- Git alias are used to make a short form of the command to be used
    $ git config --global alias.unstage 'reset HEAD --'
    $ git unstage fileA

===============================================================================
Git Branching
===============================================================================

- Git branching is instantaneous and switching back and forth between branches is really fast
- A branch is simply a lightweight movable pointer to the commits made. The default branch name in Git is master
- git branch creates a new pointer to the same commit we are currently on
- git checkout branch points our HEAD to the new branch
- Remote references are references in remote repositories, including branches, tags and etc.
- git ls-remote <remote> and git ls-remote <remote> show the remote reference details
- Remote tracking branches are refernces to the state of remote branches
- Remote tracking branch names take the form <remote>/<branch> 
- git fetch <remote> is run to synchronize your local work with a given remote
- Push a branch to share your work and for collobration with git push <remote> <branch>
    git push origin hotfix:hotfix   [hotfix is the branch on local and remote]
    git push origin hotfix
    git push origin hotfix:newbranchname
- git config --global credential.helper cache allows you to cache the credentials to push you updates to remote repository
- To merge the work that is fetched from remote repository you need to merge it as shown below
    git merge origin/hotfix
- Tracking branches are local branches that have a direct relationship to a remote branch
- Tracking a remote branch
    git checkout -b <branch> <remote>/<branch> or
    git checkout --track <remote>/<branch>
- Set up remote tracking branch for an already existing branch on local is as below
    git branch -u origin/serverfix [ -u is --set-upstream-to]
- Listing the tracking branches
    git branch -vv
- Updating your remote tracking branches with the latest updates and references
    git fetch -all
- git fetch will fetch all changes on the server that you dont have but does not modify your working directory
- git pull will fetch all changes from remote repository and merge it into to current working directory
- git pull is git fetch + git merge
- deleting a remote braching 
    git push origin --delete serverfix
- There are two ways to integrate changes from one branch into another (ie. merge and rebase)
- rebase takes all the changes that were committed on one branch and replay them on a different branch
    git checkout issuefix
    git rebase master
    git checkout master
    git merge issuefix
- Do not rebase commits that exist outside your repository and that people may have based work on

===============================================================================
Git on the Server - the protocols
===============================================================================

- A bare repository is the contents of your projects .git directory
- Git can use four distinct protocols to transfer data (ie. local, http, ssh and git)
- Local protocol is useful for file based git repository management and collaboration (i.e git clone file:///srv/git/project.git or git clone /srv/git/project.git)
- HTTP protocol is similar to SSH
- SSH protocol for git communication
- Git protocol listens on 9418










