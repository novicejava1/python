Purpose - Integrate Python with Podman REST API

Pre-requisite -
Fedora 32 installed
Podman installed
Python 3.8 installed
Python request library installed
Python json library installed

Procedure - 

Start the Podman service on TCP channel

[root@fed32 ~]# podman system service tcp:localhost:8080 --time=0 &

Import Python requests and json library to query Podman REST API url for Podman system information

[root@fed32 Python]# cat podmanPython.py 
#!/usr/bin/env python3

import requests
import json
import sys

def podmanInfo(podService, apiContext):
    url = service + "/" + context
    print(url)
    response = requests.get(url)
    print(type(response.text))
    jsonresponse = json.loads(response.text)
    #print(jsonresponse["host"])
    print(jsonresponse["host"]["hostname"])
    print(jsonresponse["host"]["arch"])
    print(jsonresponse["store"]["configFile"])

service = "http://localhost:8080/v1.40.0/libpod"
print(service)
#context="info"
context=sys.argv[1]
print(context)
print("Retrieve Podman System information")
podmanInfo(service, context)

[root@fed32 Python]# ./podmanPython.py info
http://localhost:8080/v1.40.0/libpod
info
Retrieve Podman System information
http://localhost:8080/v1.40.0/libpod/info
<class 'str'>
fed32.stack.com
amd64
/etc/containers/storage.conf

Query Podman API to fetch the list of all the containers available

def podmanContainers(podmanService, apiContext):
    url = service + "/" + context
    response = requests.get(url)
    print(type(response.text))
    jsonresponse = json.loads(response.text)
    #print(jsonresponse[0]["Names"])
    #print(jsonresponse[1]["Names"])
    for eachItem in jsonresponse:
        print(eachItem["Names"])

[root@fed32 Python]# ./podmanPython.py containers/json?all=true
http://localhost:8080/v1.40.0/libpod
containers/json?all=true
Retrieve List of all containers
<class 'str'>
['nginxTest']
['busyman2']
['sweet_dirac']

Query Podman API to fetch the list of all the Images available on the system

def podmanImages(podmanService, apiContext):
    url = service + "/" + context
    response = requests.get(url)
    print(type(response.text))
    jsonresponse = json.loads(response.text)
    #print(jsonresponse[0]["Names"])
    #print(jsonresponse[1]["Names"])
    for eachItem in jsonresponse:
        print(eachItem["Names"])

[root@fed32 Python]# ./podmanPython.py images/json
http://localhost:8080/v1.40.0/libpod
images/json
Retrieve List of all images
<class 'str'>
['localhost/hello:1.0', 'docker.io/novicejava1/hello:1.0']
['docker.io/library/busybox:latest']
['docker.io/library/nginx:latest']

Query Podman API to Pull the image from registry

def podmanPullImage(podmanService, apiContext):
    url = service + "/" + context
    print(url)
    headers = {'Content-type': 'application/json'}
    payload = {'reference':'docker.io/library/mongo'}
    #response = requests.post(url, data = jsonpayload)
    #response = requests.post(url, headers=headers, json={'reference': 'mongo'})
    response = requests.request("POST", url, headers=headers, params=payload)
    print(response)
    print(response.text)


[root@fed32 Python]# ./podmanPython.py images/pull
http://localhost:8080/v1.40.0/libpod
images/pull
Retrieve images from registry
http://localhost:8080/v1.40.0/libpod/images/pull
<Response [200]>
{"stream":"Trying to pull docker.io/library/mongo...\n"}
{"stream":"Getting image source signatures\n"}
{"stream":"Copying blob sha256:3cf8fb62ba5ffb221a2edb2208741346eb4d2d99a174138e4afbb69ce1fd9966\n"}
{"stream":"Copying blob sha256:e80c964ece6a3edf0db1cfc72ae0e6f0699fb776bbfcc92b708fbb945b0b9547\n"}
...
{"stream":"Copying blob sha256:f623ce2ba1e101df1c925b3c0230e28cd30b4e1940064a79a6816cb568754214\n"}
{"stream":"Copying config sha256:ef5c2207766e4cfa7d009b7372f315fa67a47ea5dd5b71a15b2f829c7f7d024f\n"}
{"stream":"Writing manifest to image destination\n"}
{"stream":"Storing signatures\n"}
{"images":["ef5c2207766e4cfa7d009b7372f315fa67a47ea5dd5b71a15b2f829c7f7d024f"]}
{"id":"ef5c2207766e4cfa7d009b7372f315fa67a47ea5dd5b71a15b2f829c7f7d024f"}







